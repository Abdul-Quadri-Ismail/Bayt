on:
  push:
    branches: [ main ]

name: Deploy to AWS ECR AND ECS

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build push the image to Amazon ECR
      id: build-image
      env:
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
          # Build a docker container and push it to ECR 
          docker-compose -f "docker-compose.yml" build
          echo "Pushing image to ECR..."
          docker-compose -f "docker-compose.yml"  push
          echo "Image has been pushed to AWS ECR"
          
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      env:
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: backend-${{steps.vars.outputs.stage}} #2
        image: ${{ steps.build-image.outputs.image }}
    
    - name: Deploy to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: task-definition.json
        service: taskService
        cluster: baytCluster
        wait-for-service-stability: true
